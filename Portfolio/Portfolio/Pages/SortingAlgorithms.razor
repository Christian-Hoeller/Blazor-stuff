@page "/Sorting"
@using Classes.Sorting
@using Classes.Sorting.Algorithms

<h3>SortingAlgorithms</h3>

<select class="form-control" @onchange="AlgorithmSelected">
    @foreach (var spec in specs)
    {
        <option>@spec.Name</option>
    }
</select>

<h3>Algorithm</h3>

<select class="form-control" @onchange="SolverSelected">
    @foreach(var solver in solvers)
    {
        <option>@solver.Name</option>
    }
</select>
<button @onclick="Start">Start Algorithm</button>


@code {

    List<int> numbersList = new List<int>();
    List<SortingSpec> specs = new List<SortingSpec>();
    SortingSpec selectedSpec;
    UISortingAlgorithmSolver selectedSolver;

    private List<UISortingAlgorithmSolver> solvers = new List<UISortingAlgorithmSolver>()
    {
        new UISortingAlgorithmSolver(new BubbleSort(), "BubbleSort", "crimson"),
        new UISortingAlgorithmSolver(new QuickSort(), "QuickSort", "crimson")
    };

    protected override async Task OnInitializedAsync()
    {
        await FillRandomSpecs();
    }

    async Task FillRandomSpecs()
    {
        for (int i = 10; i <= 100; i += 10)
        {
            SortingSpec x = new SortingSpec(await GetRandomNumberList(i), i.ToString());
            specs.Add(x);
        }
    }

    private void Start()
    {
        selectedSpec = selectedSpec ?? specs[0];
        selectedSolver = selectedSolver ?? solvers[0];
        List<SortingArrangement> arrangements = new List<SortingArrangement>();
        selectedSolver.Solve(selectedSpec.NumbersList);
    }

    async Task<List<int>> GetRandomNumberList(int length)
    {
        List<int> randomNumbers = new List<int>();
        Random r = new Random();

        for (int i = 0; i < length; i++)
        {
            randomNumbers.Add(r.Next(0, 1000));
        }
        return randomNumbers;
    }

    public void AlgorithmSelected(ChangeEventArgs e)
    {
        string selectedAlgorithmName = (string)e.Value;
        selectedSpec = specs.Single(spec => spec.Name == selectedAlgorithmName);
    }

    public void SolverSelected(ChangeEventArgs e)
    {
        string selectedSolverName = (string)e.Value;
        selectedSolver = solvers.Single(solver => solver.Name == selectedSolverName);
        Console.WriteLine(selectedSolver.Name);
    }

    public class UISortingAlgorithmSolver
    {
        private readonly ISortingAlgorithmSolver solver;

        public string Name { get; }
        public string Color { get; }
        public bool IsSelected { get; set; }
        private List<SortingArrangement> solution;


        public UISortingAlgorithmSolver(ISortingAlgorithmSolver solver, string name, string color)
        {
            this.solver = solver;
            Name = name;
            Color = color;
        }

        public void Solve(List<int> numbers)
        {
            this.solution = solver.Solve(numbers);
            Print();
        }

        private void Print()
        {
            //Console.WriteLine(solution.Select(x => x.Arrangement.ToString()));
        }
    }
}
