@page "/typing"

<h3>Typing Test</h3>

<div class="word-container">
    @for (int i = 0; i < WordSet.Length; i++)
    {
        <span class="word-@i" style="@WordSetStyles[i].ToString()">@WordSet[i]</span>
    }
</div>

<div class="word-input">
    <input type="text" @onkeyup="KeyUp" @bind-value="InputValue" @bind-value:event="oninput" />
</div>



@code {
    private string[] WordSet { get; set; }
    private Portfolio.Classes.WordStyle[] WordSetStyles { get; set; }

    protected override void OnInitialized()
    {
        FillWordSet();
        FillStyles();
    }

    private void FillWordSet()
    {
        string[] words = new string[200];
        List<string> wordList = new List<string>() { "Hallo", "wie", "geht", "es", "dir", "du", "coolian" };
        Random r = new Random();
        for (int i = 0; i < words.Length; i++)
        {
            words[i] = wordList[r.Next(0, wordList.Count)];
        }
        WordSet = words;
    }

    private void FillStyles()
    {
        WordSetStyles = new Classes.WordStyle[WordSet.Length];
        for (int i = 0; i < WordSetStyles.Length; i++)
        {
            WordSetStyles[i] = new Classes.WordStyle(System.Drawing.Color.White, System.Drawing.Color.Black);
        }
        WordSetStyles[0].BackgroundColor = System.Drawing.Color.LightGray;
    }

    private string InputValue { get; set; }
    private string CurrentWord { get; set; }
    private int CurrentWordIndex { get; set; } = 0;

    private void KeyUp(KeyboardEventArgs e)
    {
        UpdateWordColor();
        if (e.Key == " ")
        {
            CurrentWord = InputValue.Split(" ")[0];
            string charactersAfterSpace = InputValue.Split(" ")[1];
            bool wordIsRight = CheckIfInputIsRight();

            ClearInput();
            InputValue = charactersAfterSpace;
            CurrentWordIndex++;
            UpdateWordBackgroundColor();
            UpdateLastWordStlye(wordIsRight);
        }
    }

    private void UpdateWordColor()
    {
        if (!WordSet[CurrentWordIndex].StartsWith(InputValue.Split(" ")[0]))
        {
            WordSetStyles[CurrentWordIndex].Color = System.Drawing.Color.Red;
        }
        else
        {
            WordSetStyles[CurrentWordIndex].Color = System.Drawing.Color.Black;
        }
    }

    private bool CheckIfInputIsRight()
    {
        return CurrentWord == WordSet[CurrentWordIndex];
    }

    private void ClearInput()
    {
        CurrentWord = string.Empty;
        InputValue = string.Empty;
    }

    private void UpdateWordBackgroundColor()
    {
        WordSetStyles[CurrentWordIndex - 1].BackgroundColor = System.Drawing.Color.White;
        WordSetStyles[CurrentWordIndex].BackgroundColor = System.Drawing.Color.LightGray;
    }

    private void UpdateLastWordStlye(bool lastWordWasRight)
    {
        if (lastWordWasRight)
        {
            WordSetStyles[CurrentWordIndex - 1].Color = System.Drawing.Color.Green;
        }
        else
        {
            WordSetStyles[CurrentWordIndex - 1].Color = System.Drawing.Color.Red;
        }
    }
}