@page "/typing"
@page "/typing/{SelectedLanguage}"
@inject IJSRuntime JSRuntime;
@using Classes;

<h3>Typing Test</h3>

<select @onchange="WordAmountChanged">
    @foreach (var wordAmount in WordAmounts)
    {
        @if(wordAmount == WordSetSettings.WordAmount)
        {
            <option selected>@wordAmount</option>
        }
        else
        {
            <option>@wordAmount</option>
        }
    }
    
</select>
<select @onchange="LanguageChanged">
    @foreach(var language in Langauges)
    {
        if(language == SelectedLanguage)
        {
            <option selected>@language</option>
        }
        else
        {
            <option>@language</option>
        }
    }
</select>

<div class="word-container">
    @for (int i = 0; i < WordSet.Length; i++)
    {
        <span class="word-@i" style="@WordSetStyles[i].ToString()">@WordSet[i]</span>
    }
</div>

<div class="word-input">
    <input type="text" spellcheck="false" @onkeyup="KeyUp" @bind-value="InputValue" @bind-value:event="oninput" readonly=@gameOver />
    <button @onclick="ResetEverything">restart</button>
</div>

<div style="@ShowStats">
    <h4>YOUR STATS</h4>
    <p>Wrong Words:@wrongWords</p>
    <p>Correct Words:@correctWords</p>
    <p>Correct Characters:@correctCharacters</p>
    <p>Your Time:@StopWatchValue</p>
    <p>WPM:@wordsPerMinute</p>
</div>



@code {

    [Parameter]
    public string SelectedLanguage { get; set; }

    List<int> WordAmounts = new List<int>() {10, 50, 100, 200, 300, 400 };
    WordSetSettings WordSetSettings;
    List<string> Langauges = new List<string>() { "german", "english" };

    protected override void OnInitialized()
    {
        if(SelectedLanguage == null)
        {
            SelectedLanguage = "german";
        }
        WordSetSettings = new WordSetSettings("german", WordAmounts[1]);
        FillWordSet();
        FillStyles();
    }

    private string[] WordSet { get; set; }
    private WordStyle[] WordSetStyles { get; set; }

    private void FillWordSet()
    {
        string[] words = new string[WordSetSettings.WordAmount];

        WordSets AllWordSets = new WordSets();
        List<string> selectedWordSet = AllWordSets.GetSetByLanguage(SelectedLanguage);

        Random r = new Random();
        for (int i = 0; i < words.Length; i++)
        {
            words[i] = selectedWordSet[r.Next(0, selectedWordSet.Count)];
        }
        WordSet = words;
    }

    private void FillStyles()
    {
        WordSetStyles = new WordStyle[WordSet.Length];
        for (int i = 0; i < WordSetStyles.Length; i++)
        {
            WordSetStyles[i] = new WordStyle(System.Drawing.Color.White, System.Drawing.Color.Black);
        }
        WordSetStyles[0].BackgroundColor = System.Drawing.Color.LightGray;
    }

    private void WordAmountChanged(ChangeEventArgs e)
    {
        WordSetSettings.WordAmount = Convert.ToInt32(e.Value);
        ResetEverything();
    }

    private void LanguageChanged(ChangeEventArgs e)
    {
        SelectedLanguage = (string)e.Value;
        ResetEverything();
    }

    public string ShowStats { get; set; } = "display: none;";



    private void ResetEverything()
    {
        FillWordSet();
        FillStyles();
        gameOver = false;
        StopWatchValue = new TimeSpan();
        istStopwatchRunning = false;
        currentWordIndex = 0;
        correctCharacters = 0;
        correctWords = 0;
        wrongWords = 0;
        InputValue = string.Empty;
        ShowStats = "display:none;";
    }

    private bool gameOver = false;
    private string InputValue { get; set; }
    private string CurrentWord { get; set; }

    private int currentWordIndex = 0;
    public int correctWords = 0;
    public int wrongWords = 0;
    public int correctCharacters = 0;

    private int wordsPerMinute;

    private async void KeyUp(KeyboardEventArgs e)
    {
        if (!gameOver)
        {
            UpdateWordColor();
            if (istStopwatchRunning == false)
            {
                StartStopWatch();
            }
            if (e.Key == " ")
            {
                CurrentWord = InputValue.Split(" ")[0];
                string charactersAfterSpace = InputValue.Split(" ")[1];
                bool wordIsRight = CheckIfInputIsRight();

                UpdateStats(wordIsRight);

                ClearInput();
                InputValue = charactersAfterSpace;
                if (currentWordIndex == WordSet.Length - 1)
                {
                    //-------------------------typing test has ended
                    istStopwatchRunning = false;
                    gameOver = true;
                    CalculateWordsPerMinute();
                    ShowStats = string.Empty;
                }
                else
                {
                    currentWordIndex++;
                    UpdateWordBackgroundColor();
                    UpdateLastWordStlye(wordIsRight);
                }


            }
        }
    }

    private void UpdateWordColor()
    {
        if (!WordSet[currentWordIndex].StartsWith(InputValue.Split(" ")[0]))
        {
            WordSetStyles[currentWordIndex].Color = System.Drawing.Color.Red;
        }
        else
        {
            WordSetStyles[currentWordIndex].Color = System.Drawing.Color.Black;
        }
    }

    TimeSpan StopWatchValue = new TimeSpan();
    bool istStopwatchRunning = false;

    async Task StartStopWatch()
    {
        istStopwatchRunning = true;
        while (istStopwatchRunning)
        {
            await Task.Delay(1000);
            if (istStopwatchRunning)
            {
                StopWatchValue = StopWatchValue.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }

    private bool CheckIfInputIsRight()
    {
        return CurrentWord == WordSet[currentWordIndex];
    }

    private void UpdateStats(bool wordIsRight)
    {
        if (wordIsRight)
        {
            correctWords++;
            correctCharacters += CurrentWord.Length;
            correctCharacters += 1; //space counts as a character
        }
        else
        {
            wrongWords++;
        }
    }

    private void ClearInput()
    {
        CurrentWord = string.Empty;
        InputValue = string.Empty;
    }

    private void UpdateWordBackgroundColor()
    {
        WordSetStyles[currentWordIndex - 1].BackgroundColor = System.Drawing.Color.White;
        WordSetStyles[currentWordIndex].BackgroundColor = System.Drawing.Color.LightGray;
    }

    private void UpdateLastWordStlye(bool lastWordWasRight)
    {
        if (lastWordWasRight)
        {
            WordSetStyles[currentWordIndex - 1].Color = System.Drawing.Color.Green;
        }
        else
        {
            WordSetStyles[currentWordIndex - 1].Color = System.Drawing.Color.Red;
        }
    }

    private void CalculateWordsPerMinute()
    {
        //60 seconds is a factor of 1
        var factor = StopWatchValue.TotalSeconds / 60;

        wordsPerMinute = Convert.ToInt32((correctCharacters / 5) / factor);
    }
}